#ifndef main_h
#define main_h

#define WIDTH 10
#define HEIGHT 22
#define NUM_OF_SHAPE 7
#define NUM_OF_ROTATE 4
#define BLOCK_HEIGHT 4
#define BLOCK_WIDTH 4
#define BLOCK_NUM 2

#define NUM_OF_POPULATION 20
#define NUM_OF_TOP_POPULATION 4
#define NUM_OF_WEIGHTS 8
#define NUM_OF_PLAY 20

#define CHANCE_OF_MUTATION 10
#define AMOUNT_OF_MUTATION 0.5

const char block[NUM_OF_SHAPE][NUM_OF_ROTATE][BLOCK_HEIGHT][BLOCK_WIDTH] ={
    /*  ▢▢▢▢    ▢▩▢▢    ▢▢▢▢    ▢▩▢▢
        ▩▩▩▩    ▢▩▢▢    ▩▩▩▩    ▢▩▢▢
        ▢▢▢▢    ▢▩▢▢    ▢▢▢▢    ▢▩▢▢
        ▢▢▢▢    ▢▩▢▢    ▢▢▢▢    ▢▩▢▢ */
    {
        {{0, 0, 0, 0}, {1, 1, 1, 1}, {0, 0, 0, 0}, {0, 0, 0, 0}},
        {{0, 1, 0, 0}, {0, 1, 0, 0}, {0, 1, 0, 0}, {0, 1, 0, 0}},
        {{0, 0, 0, 0}, {1, 1, 1, 1}, {0, 0, 0, 0}, {0, 0, 0, 0}},
        {{0, 1, 0, 0}, {0, 1, 0, 0}, {0, 1, 0, 0}, {0, 1, 0, 0}}
    },
    /*  ▢▢▢▢    ▢▢▢▢    ▢▢▢▢    ▢▢▢▢
        ▢▢▢▢    ▢▢▩▩    ▢▩▢▢    ▢▢▩▢
        ▢▩▩▩    ▢▢▩▢    ▢▩▩▩    ▢▢▩▢
        ▢▢▢▩    ▢▢▩▢    ▢▢▢▢    ▢▩▩▢ */
    {
        {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 1, 1, 1}, {0, 0, 0, 1}},
        {{0, 0, 0, 0}, {0, 0 ,1, 1}, {0, 0, 1, 0}, {0, 0, 1, 0}},
        {{0, 0, 0, 0}, {0, 1, 0, 0}, {0, 1, 1, 1}, {0, 0, 0, 0}},
        {{0, 0, 0, 0}, {0, 0, 1, 0}, {0, 0, 1, 0}, {0, 1, 1, 0}}
    },
    /*  ▢▢▢▢    ▢▢▢▢    ▢▢▢▢    ▢▢▢▢
        ▢▢▢▢    ▢▢▩▢    ▢▢▢▩    ▢▩▩▢
        ▢▩▩▩    ▢▢▩▢    ▢▩▩▩    ▢▩▢▢
        ▢▩▢▢    ▢▢▩▩    ▢▢▢▢    ▢▩▢▢ */
    {
        {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 1, 1, 1}, {0, 1, 0, 0}},
        {{0, 0, 0, 0}, {0, 0, 1, 0}, {0, 0, 1, 0}, {0, 0, 1, 1}},
        {{0, 0, 0, 0}, {0, 0, 0, 1}, {0, 1, 1, 1}, {0, 0, 0, 0}},
        {{0, 0, 0, 0}, {0, 1, 1, 0}, {0, 0, 1, 0}, {0, 0, 1, 0}}
    },
    /*  ▢▢▢▢    ▢▩▢▢    ▢▢▢▢    ▢▢▢▢
        ▢▩▢▢    ▩▩▢▢    ▢▢▢▢    ▢▩▢▢
        ▩▩▩▢    ▢▩▢▢    ▩▩▩▢    ▢▩▩▢
        ▢▢▢▢    ▢▢▢▢    ▢▩▢▢    ▢▩▢▢ */
    {
        {{0, 0, 0, 0}, {0, 1, 0, 0}, {1, 1, 1, 0}, {0, 0, 0, 0}},
        {{0, 0, 0, 0}, {0, 1, 0, 0}, {1, 1, 0, 0}, {0, 1, 0, 0}},
        {{0, 0, 0, 0}, {0, 0, 0, 0}, {1, 1, 1, 0}, {0, 1, 0, 0}},
        {{0, 0, 0, 0}, {0, 1, 0, 0}, {0, 1, 1, 0}, {0, 1, 0, 0}}
    },
    /*  ▢▢▢▢    ▢▢▢▢    ▢▢▢▢    ▢▢▢▢
        ▢▢▢▢    ▢▢▢▢    ▢▢▢▢    ▢▢▢▢
        ▢▩▩▢    ▢▩▩▢    ▢▩▩▢    ▢▩▩▢
        ▢▩▩▢    ▢▩▩▢    ▢▩▩▢    ▢▩▩▢ */
    {
        {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 1, 1, 0}, {0, 1, 1, 0}},
        {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 1, 1, 0}, {0, 1, 1, 0}},
        {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 1, 1, 0}, {0, 1, 1, 0}},
        {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 1, 1, 0}, {0, 1, 1, 0}}
    },
    /*  ▢▢▢▢    ▢▢▢▢    ▢▢▢▢    ▢▢▢▢
        ▢▢▩▩    ▢▩▢▢    ▢▢▩▩    ▢▩▢▢
        ▢▩▩▢    ▢▩▩▢    ▢▩▩▢    ▢▩▩▢
        ▢▢▢▢    ▢▢▩▢    ▢▢▢▢    ▢▢▩▢ */
    {
        {{0, 0, 0, 0}, {0, 0, 1, 1}, {0, 1, 1, 0}, {0, 0, 0, 0}},
        {{0, 0, 0, 0}, {0, 1, 0, 0}, {0, 1, 1, 0}, {0, 0, 1, 0}},
        {{0, 0, 0, 0}, {0, 0, 1, 1}, {0, 1, 1, 0}, {0, 0, 0, 0}},
        {{0, 0, 0, 0}, {0, 1, 0, 0}, {0, 1, 1, 0}, {0, 0, 1, 0}}
    },
    /*  ▢▢▢▢    ▢▢▢▢    ▢▢▢▢    ▢▢▢▢
        ▢▢▢▢    ▢▢▩▢    ▢▢▢▢    ▢▢▩▢
        ▢▩▩▢    ▢▩▩▢    ▢▩▩▢    ▢▩▩▢
        ▢▢▩▩    ▢▩▢▢    ▢▢▩▩    ▢▩▢▢ */
    {
        {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 1, 1, 0}, {0, 0, 1, 1}},
        {{0, 0, 0, 0}, {0, 0, 1, 0}, {0, 1, 1, 0}, {0, 1, 0, 0}},
        {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 1, 1, 0}, {0, 0, 1, 1}},
        {{0, 0, 0, 0}, {0, 0, 1, 0}, {0, 1, 1, 0}, {0, 1, 0, 0}}
    }
};

typedef struct _Boundary{
    int x1, x2, y1, y2;
    int size_x, size_y;
}Boundary;

const Boundary boundary[NUM_OF_SHAPE][NUM_OF_ROTATE] = {
    {
        {0, 6, -1, 20, 4, 1}, {-1, 8, 0, 18, 1, 4}, {0, 6, -1, 20, 4, 1}, {-1, 8, 0, 18, 1, 4}
    },
    {
        {-1, 6, -2, 18, 3, 2}, {-2, 6, -1, 18, 2, 3}, {-1, 6, -1, 19, 3, 2}, {-1, 7, -1, 18, 2, 3}
    },
    {
        {-1, 6, -2, 18, 3, 2}, {-2, 6, -1, 18, 2, 3}, {-1, 6, -1, 19, 3, 2}, {-1, 7, -1, 18, 2, 3}
    },
    {
        {0, 7, -1, 19, 3, 2}, {0, 8, -1, 18, 2, 3}, {0, 7, -2, 18, 3, 2}, {-1, 7, -1, 18, 2, 3}
    },
    {
        {-1, 7, -2, 18, 2, 2}, {-1, 7, -2, 18, 2, 2}, {-1, 7, -2, 18, 2, 2}, {-1, 7, -2, 18, 2, 2}
    },
    {
        {-1, 6, -1, 19, 3, 2}, {-1, 7, -1, 18, 2, 3}, {-1, 6, -1, 19, 3, 2}, {-1, 7, -1, 18, 2, 3}
    },
    {
        {-1, 6, -2, 18, 3, 2}, {-1, 7, -1, 18, 2, 3}, {-1, 6, -2, 18, 3, 2}, {-1, 7, -1, 18, 2, 3}
    },
};

const int rotateNum[NUM_OF_SHAPE] = {2, 4, 4, 4, 1, 2, 2};

#endif
